// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arcesoft.TicTacToe.BetterTestingApproach.ArtificialIntelligence
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BruteForceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "BruteForce.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BruteForce", "\tVerify that the brute force artificial intelligence works correctly", ProgrammingLanguage.CSharp, new string[] {
                        "BetterTestingApproach",
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "BruteForce")))
            {
                global::Arcesoft.TicTacToe.BetterTestingApproach.ArtificialIntelligence.BruteForceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have a container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Given("I have a tictactoe factory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("I have the artificial intelligence \'BruteForce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find tie move results for game as player X")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindTieMoveResultsForGameAsPlayerX()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find tie move results for game as player X", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 18
 testRunner.Given("I start a new game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table1.AddRow(new string[] {
                        "NorthWest",
                        "Tie"});
            table1.AddRow(new string[] {
                        "Northern",
                        "Tie"});
            table1.AddRow(new string[] {
                        "NorthEast",
                        "Tie"});
            table1.AddRow(new string[] {
                        "Western",
                        "Tie"});
            table1.AddRow(new string[] {
                        "Center",
                        "Tie"});
            table1.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table1.AddRow(new string[] {
                        "SouthWest",
                        "Tie"});
            table1.AddRow(new string[] {
                        "Southern",
                        "Tie"});
            table1.AddRow(new string[] {
                        "SouthEast",
                        "Tie"});
#line 20
 testRunner.Then("The move results should contain the following", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find winning move results for game as player X when Os first move is weste" +
            "rn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsWestern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find winning move results for game as player X when Os first move is weste" +
                    "rn", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table2.AddRow(new string[] {
                        "Center"});
            table2.AddRow(new string[] {
                        "Western"});
            table2.AddRow(new string[] {
                        "NorthWest"});
            table2.AddRow(new string[] {
                        "SouthEast"});
#line 33
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table2, "Given ");
#line 39
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table3.AddRow(new string[] {
                        "Northern",
                        "XWin"});
            table3.AddRow(new string[] {
                        "NorthEast",
                        "XWin"});
            table3.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table3.AddRow(new string[] {
                        "SouthWest",
                        "Tie"});
            table3.AddRow(new string[] {
                        "Southern",
                        "Tie"});
#line 40
 testRunner.Then("The move results should contain the following", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find winning move results for game as player X when Os first move is easte" +
            "rn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsEastern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find winning move results for game as player X when Os first move is easte" +
                    "rn", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table4.AddRow(new string[] {
                        "Center"});
            table4.AddRow(new string[] {
                        "Eastern"});
            table4.AddRow(new string[] {
                        "SouthEast"});
            table4.AddRow(new string[] {
                        "NorthWest"});
#line 49
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table4, "Given ");
#line 55
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table5.AddRow(new string[] {
                        "Northern",
                        "Tie"});
            table5.AddRow(new string[] {
                        "NorthEast",
                        "Tie"});
            table5.AddRow(new string[] {
                        "Western",
                        "Tie"});
            table5.AddRow(new string[] {
                        "SouthWest",
                        "XWin"});
            table5.AddRow(new string[] {
                        "Southern",
                        "XWin"});
#line 56
 testRunner.Then("The move results should contain the following", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find winning move results for game as player X when Os first move is north" +
            "ern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsNorthern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find winning move results for game as player X when Os first move is north" +
                    "ern", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table6.AddRow(new string[] {
                        "Center"});
            table6.AddRow(new string[] {
                        "Northern"});
            table6.AddRow(new string[] {
                        "NorthWest"});
            table6.AddRow(new string[] {
                        "SouthEast"});
#line 65
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table6, "Given ");
#line 71
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table7.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table7.AddRow(new string[] {
                        "Western",
                        "XWin"});
            table7.AddRow(new string[] {
                        "NorthEast",
                        "Tie"});
            table7.AddRow(new string[] {
                        "SouthWest",
                        "XWin"});
            table7.AddRow(new string[] {
                        "Southern",
                        "Tie"});
#line 72
 testRunner.Then("The move results should contain the following", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find winning move results for game as player X when Os first move is south" +
            "ern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindWinningMoveResultsForGameAsPlayerXWhenOsFirstMoveIsSouthern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find winning move results for game as player X when Os first move is south" +
                    "ern", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table8.AddRow(new string[] {
                        "Center"});
            table8.AddRow(new string[] {
                        "Southern"});
            table8.AddRow(new string[] {
                        "SouthWest"});
            table8.AddRow(new string[] {
                        "NorthEast"});
#line 81
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table8, "Given ");
#line 87
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table9.AddRow(new string[] {
                        "NorthWest",
                        "XWin"});
            table9.AddRow(new string[] {
                        "Northern",
                        "Tie"});
            table9.AddRow(new string[] {
                        "Eastern",
                        "Tie"});
            table9.AddRow(new string[] {
                        "Western",
                        "XWin"});
            table9.AddRow(new string[] {
                        "SouthEast",
                        "Tie"});
#line 88
 testRunner.Then("The move results should contain the following", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find winning move results for game as player O when Xs two moves are easte" +
            "rn and western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindWinningMoveResultsForGameAsPlayerOWhenXsTwoMovesAreEasternAndWestern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find winning move results for game as player O when Xs two moves are easte" +
                    "rn and western", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table10.AddRow(new string[] {
                        "Western"});
            table10.AddRow(new string[] {
                        "Center"});
            table10.AddRow(new string[] {
                        "Eastern"});
#line 97
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table10, "Given ");
#line 102
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table11.AddRow(new string[] {
                        "NorthWest",
                        "OWin"});
            table11.AddRow(new string[] {
                        "Northern",
                        "OWin"});
            table11.AddRow(new string[] {
                        "NorthEast",
                        "OWin"});
            table11.AddRow(new string[] {
                        "SouthWest",
                        "OWin"});
            table11.AddRow(new string[] {
                        "Southern",
                        "OWin"});
            table11.AddRow(new string[] {
                        "SouthEast",
                        "OWin"});
#line 103
 testRunner.Then("The move results should contain the following", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should find winning move results for game as player O when Xs two moves are north" +
            "ern and southern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public virtual void ShouldFindWinningMoveResultsForGameAsPlayerOWhenXsTwoMovesAreNorthernAndSouthern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should find winning move results for game as player O when Xs two moves are north" +
                    "ern and southern", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Move"});
            table12.AddRow(new string[] {
                        "Northern"});
            table12.AddRow(new string[] {
                        "Center"});
            table12.AddRow(new string[] {
                        "Southern"});
#line 113
 testRunner.Given("I start a new game with the following moves", ((string)(null)), table12, "Given ");
#line 118
 testRunner.When("I have the AI find move results for the current game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "MoveMade",
                        "GameStateAfterMove"});
            table13.AddRow(new string[] {
                        "NorthWest",
                        "OWin"});
            table13.AddRow(new string[] {
                        "NorthEast",
                        "OWin"});
            table13.AddRow(new string[] {
                        "Western",
                        "OWin"});
            table13.AddRow(new string[] {
                        "Eastern",
                        "OWin"});
            table13.AddRow(new string[] {
                        "SouthWest",
                        "OWin"});
            table13.AddRow(new string[] {
                        "SouthEast",
                        "OWin"});
#line 119
 testRunner.Then("The move results should contain the following", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ShouldMakeNextRandomBestMoveAvailable(string testName, string initialMoves, string expectedMoves, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should make next random best move available", exampleTags);
#line 128
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 129
 testRunner.Given(string.Format("I start a new game with the following moves \'{0}\'", initialMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.When("I have the AI make the next random best move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then(string.Format("The last move made should be one of the following moves \'{0}\'", expectedMoves), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should make next random best move available: for X when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for X when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for X when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,Western,NorthWest,SouthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "Northern,NorthEast")]
        public virtual void ShouldMakeNextRandomBestMoveAvailable_ForXWhenBestOptionIsWinning()
        {
#line 128
this.ShouldMakeNextRandomBestMoveAvailable("for X when best option is winning", "Center,Western,NorthWest,SouthEast", "Northern,NorthEast", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should make next random best move available: for X when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for X when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for X when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,NorthWest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "Northern,NorthEast,Eastern,Western,SouthEast,Southern")]
        public virtual void ShouldMakeNextRandomBestMoveAvailable_ForXWhenBestOptionIsTieing()
        {
#line 128
this.ShouldMakeNextRandomBestMoveAvailable("for X when best option is tieing", "Center,NorthWest", "Northern,NorthEast,Eastern,Western,SouthEast,Southern", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should make next random best move available: for X when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for X when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for X when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Western,Center,Eastern,Northern")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "NorthWest,NorthEast,SouthEast,Southern,SouthWest")]
        public virtual void ShouldMakeNextRandomBestMoveAvailable_ForXWhenBestOptionIsLosing()
        {
#line 128
this.ShouldMakeNextRandomBestMoveAvailable("for X when best option is losing", "Western,Center,Eastern,Northern", "NorthWest,NorthEast,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should make next random best move available: for O when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for O when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for O when best option is winning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Eastern,Center,Western")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "NorthEast,Northern,NorthWest,SouthEast,Southern,SouthWest")]
        public virtual void ShouldMakeNextRandomBestMoveAvailable_ForOWhenBestOptionIsWinning()
        {
#line 128
this.ShouldMakeNextRandomBestMoveAvailable("for O when best option is winning", "Eastern,Center,Western", "NorthEast,Northern,NorthWest,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should make next random best move available: for O when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for O when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for O when best option is tieing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "NorthEast,NorthWest,SouthEast,SouthWest")]
        public virtual void ShouldMakeNextRandomBestMoveAvailable_ForOWhenBestOptionIsTieing()
        {
#line 128
this.ShouldMakeNextRandomBestMoveAvailable("for O when best option is tieing", "Center", "NorthEast,NorthWest,SouthEast,SouthWest", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should make next random best move available: for O when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BruteForce")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BetterTestingApproach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "for O when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "for O when best option is losing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialMoves", "Center,Eastern,NorthEast")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedMoves", "Northern,NorthWest,Western,SouthEast,Southern,SouthWest")]
        public virtual void ShouldMakeNextRandomBestMoveAvailable_ForOWhenBestOptionIsLosing()
        {
#line 128
this.ShouldMakeNextRandomBestMoveAvailable("for O when best option is losing", "Center,Eastern,NorthEast", "Northern,NorthWest,Western,SouthEast,Southern,SouthWest", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
